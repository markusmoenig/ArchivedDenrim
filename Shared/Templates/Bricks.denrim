{"assets":[{"group":"","id":"79C45FC7-6C85-410F-9FDB-4F66E1E24568","value":"tree \"init\"\n    score = Int<0>\n    instanceScore = Int<0>\n    gameOver = Bool<false>\n    ballSpeed = Float2<1,1>\n    touchPos = Float2<0,0>\n\n    repeat\n        SetScene<Map: \"Map\"><SceneId: scene>\n\ntree \"gameOver\"\n    repeat\n        SetScene<Map: \"GameOver\"><SceneId: scene>\n        Set<Variable: gameOver><Bool: true>\n        Set<Variable: score><Int: 0>\n        Set<Variable: instanceScore><Int: 0>\n        Set<Variable: ballSpeed><Float2: 1,1>\n\ntree \"update\"\n    while gameOver\n        sequence\n            # Wait for space key or any touch\n            selector\n                IsKeyDown<Key: \"Space\">\n                GetTouchPos<Variable: touchPos>\n            repeat\n                SetScene<Map: \"Map\"><SceneId: scene>\n                Set<Variable: gameOver><Bool: false>\n\ntree \"addScore\" Int<one>\n    repeat \n        Add<Int: one><To: score>\n        Add<Int: one><To: instanceScore>\n        sequence\n            IsVariable<Variable: instanceScore><Mode: \"Equal\"><Int: 20>\n            # Player cleared the table, reset and increase ball speed\n            SetScene<Map: \"Map\"><SceneId: scene>\n            Set<Variable: instanceScore><Int: 0>\n            Add<Float2: 0.5,0.5><To: ballSpeed>\n            Call<Tree: ball.reset><Variables: ballSpeed>\n\ntree \"draw\"\n    repeat\n","data":[],"type":0,"name":"Game"},{"group":"","id":"93F8F81D-9FE3-4005-93D1-E17B42EEE436","value":"CanvasSize<Platform: \"Any\"><Size: 800, 400>\n\nwallShape = Shape2D<Type:\"Box\"><Position: 10, 0><Size: 80, 110><Onion: 1>\n\nbrick = Behavior<Name: \"Brick\">\npaddle = Behavior<Name: \"Paddle\">\nball = Behavior<Name: \"Ball\">\nbackground = Behavior<Name: \"Background\">\n\nscore = Shape2D<Type: \"Text\"><Position: 0.3, 0.5><Int: game.score><Font: \"Square\"><FontSize: 4.5><Digits: 3>\n\nbrickShape = Shape2D<Type:\"Box\"><Position: brick.position><Color: brick.color><Visible: brick.visible><Size: 13, 5><Round: 2.5><Border: 0.4><BorderColor: brick.borderColor>\npaddleShape = Shape2D<Type:\"Box\"><Position: paddle.position><Size: 13, 4><Color: paddle.color><Round: 2><Border: 0.4><BorderColor: 1,1,1,1>\nballShape = Shape2D<Type:\"Disk\"><Position: ball.position><Radius: ball.radius><Color: ball.color><Border: 0.4><BorderColor: 1,1,1,1>\nbackShader = Shader<Name: \"Background\"><BehaviorId: background><Area: \"Full\">\n\nbrickGrid = GridInstance2D<ShapeId: brickShape><BehaviorId: brick><Grid: 5, 4><Offset: 14, 5>\n\n# We create two layers because we want to clip the shapeLayer to the canvas\nshaderLayer = Layer<Shaders: backShader>\nshapeLayer = Layer<<Shapes: score, wallShape, brickShape, paddleShape, ballShape><ClipToCanvas: true>\n\nscene = Scene<Layers: shaderLayer, shapeLayer>\n","data":[],"type":3,"name":"Map"},{"group":"","id":"20D4381C-6342-41F5-A189-2D01B7900C0C","value":"tree \"init\"\n    position = Float2<43, 90>\n    touchPos = Float2<0, 0>\n    color = Float4<0.714, 0.388, 0.678, 1.000>\n\ntree \"update\"\n    sequence\n        selector\n            IsKeyDown<Key: \"A\">\n            IsKeyDown<Key: \"ArrowLeft\">\n        Subtract<Float2: 0.5, 0><From: position><Minimum: 11, 90>\n\n    sequence\n        selector\n            IsKeyDown<Key: \"D\">\n            IsKeyDown<Key: \"ArrowRight\">\n        Add<Float2: 0.5, 0><To: position><Maximum: 76, 90>\n        \n    sequence\n        GetTouchPos<Variable: touchPos>\n        repeat\n            # Touch on the left side ?\n            sequence\n                IsVariable<Variable: touchPos><Mode: \"LessThan\"><Float2: 50, 500>\n                Subtract<Float2: 0.5, 0><From: position><Minimum: 11, 90>\n            # Touch on the right side ?\n            sequence\n                IsVariable<Variable: touchPos><Mode: \"GreaterThan\"><Float2: 50, 0>\n                Add<Float2: 0.5, 0><To: position><Maximum: 76, 90>\n\n ","data":[],"type":0,"name":"Paddle"},{"group":"","id":"E1211681-3FAE-4608-BB32-5F9B6C0A762D","value":"\nfloat4 hexPatternMaterial( float2 p )\n{\n    float2 q = float2( p.x*2.0*0.5773503, p.y + p.x*0.5773503 );\n            \n    float2 pi = floor(q);\n    float2 pf = fract(q);\n\n    float v = fmod(pi.x + pi.y, 3.0);\n\n    float ca = step(1.0,v);\n    float cb = step(2.0,v);\n    float2  ma = step(pf.xy,pf.yx);\n            \n    \/\/ distance to borders\n    float e = dot( ma, 1.0-pf.yx + ca*(pf.x+pf.y-1.0) + cb*(pf.yx-2.0*pf.xy) );\n\n    \/\/ distance to center\n    p = float2( q.x + floor(0.5+p.y\/1.5), 4.0*p.y\/3.0 )*0.5 + 0.5;\n    float f = length( (fract(p) - 0.5)*float2(1.0,0.85) );\n\n    return float4( pi + ca - cb*ma, e, f );\n}\n\nfragment float4 shaderMain(RasterizerData in [[stage_in]], constant BehaviorData &behavior [[buffer(0)]])\n{\n    float2 uv = in.textureCoordinate;\n    float2 size = in.viewportSize;\n    \n    float lastHitTime => behavior.lastHitTime = 0;\n    float Time => behavior.Time = 0;\n    float2 Aspect => behavior.Aspect = float2(1);\n\n    float4 rc = hexPatternMaterial(abs((uv * size \/ min(Aspect.x, Aspect.y)) * 0.2));\n    float s = 0.05;\n    \/\/float t = clamp((_Time - lastHitTime), 0.0, 1.0);\n    float t = smoothstep(0.0, 1.0, (Time - lastHitTime));\n    float4 frontColor = mix(float4(0.2,0.2,0.2,1), float4(0.1,0.1,0.1,1), t);\n    return mix(float4(0, 0, 0, 1), frontColor, smoothstep( s, s + 0.1, rc.z ) );\n}\n","data":[],"type":2,"name":"Background"},{"group":"","id":"DE6D783D-CE61-46E5-8C23-BB9E3D29BD83","value":"tree \"init\"\n    position = Float2<44, 70>\n    radius = Float<2>\n    velocity = Float2<0.5, -0.75>\n    distanceToPaddle = Float<1>\n    color = Float4<0.408, 0.616, 0.710, 1.000>\n\ntree \"reflectV\"\n    repeat\n        Multiply<Float2: 1, -1><With: velocity>\n        \ntree \"reset\" Float2<ballSpeed>\n    repeat\n        Set<Variable: position><Float2: 44, 70>\n        Set<Variable: velocity><Float2: 0.5, 0.75>\n        Multiply<Float2: ballSpeed><With: velocity>    \n\ntree \"update\"\n    repeat\n\n        # Add the velocity to the position\n        Add<Float2: velocity><To: position>\n\n        Call<Tree: brick.checkForHit><Variables: position, radius>\n        \n        # Get the distance to the paddle shape\n        DistanceToShape<Position: position><Radius: radius><ShapeId: paddleShape><Variable: distanceToPaddle>\n        # Hit the paddle ?\n        sequence\n            IsVariable<Variable: distanceToPaddle><Mode: \"LessThan\"><Float: 0>\n            # Ball hits the paddle, but only hits from the top are allowed (not side hits)\n            IsVariable<Variable: position><Mode: \"LessThan\"><Float2: 100, 87>\n            Multiply<Float2: 1, -1><With: velocity>    \n            Add<Float2: velocity><To: position>\n            \n        # Hit the right wall ?\n        sequence\n            IsComponent<Variable: position><Component: \"x\"><Mode: \"GreaterThan\"><Float: 86>\n            Multiply<Float2: -1, 1><With: velocity>\n            Add<Float2: velocity><To: position>\n\n        # Hit the left wall ?\n        sequence\n            IsComponent<Variable: position><Component: \"x\"><Mode: \"LessThan\"><Float: 11.5>\n            Multiply<Float2: -1, 1><With: velocity>\n            Add<Float2: velocity><To: position>\n        \n        # Hit the top wall ?\n        sequence\n            IsComponent<Variable: position><Component: \"y\"><Mode: \"LessThan\"><Float: 3>\n            Multiply<Float2: 1, -1><With: velocity>\n            Add<Float2: velocity><To: position>\n            \n        # Check for game over when ball position too low\n        sequence\n            IsComponent<Variable: position><Component: \"y\"><Mode: \"GreaterThan\"><Float: 95>\n            Call<Tree: game.gameOver>\n\n","data":[],"type":0,"name":"Ball"},{"group":"","id":"296766C5-6317-4A38-A503-FBA233161191","value":"tree \"init\"\n    position = Float2<15, 5>\n    visible = Bool<true>\n    hasBeenHit = Bool<false>\n    distanceToBrick = Float<1>\n    color = Float4<1,1,1,1>\n    borderColor = Float4<1,1,1,1>\n    one = Int<1>\n    \n    repeat \n        RandomColor<Variable: color><a: 0.5, 0.5, 0.5><b: 0.5, 0.5, 0.5><c: 1.0, 0.7, 0.4><d: 0.0, 0.15, 0.20>\n        Set<Variable: borderColor><Float4: color>\n        Add<Float4: 0.5, 0.5, 0.5, 0.0><To: borderColor><Maximum: 1,1,1,1>\n\n# Gets called from 'Ball' and tests if the ball hits this brick instance\ntree \"checkForHit\" Float2<ballPos>Float<ballRadius>\n    while not hasBeenHit\n        sequence\n            DistanceToShape<Position: ballPos><Radius: ballRadius><ShapeId: brickShape><Variable: distanceToBrick>\n            IsVariable<Variable: distanceToBrick><Mode: \"LessThan\"><Float: 0>\n            Call<Tree: game.addScore><Variables: one>\n            Call<Tree: ball.reflectV>\n            Call<Tree: background.flash>\n            Set<Variable: hasBeenHit><Bool: true>\n\n    while visible\n        while hasBeenHit\n            Subtract<Float4: 0.05,0.05,0.05,0.05><From: color>\n            Subtract<Float4: 0.05,0.05,0.05,0.05><From: borderColor>\n            sequence\n                IsVariable<Variable: color><Mode: \"LessThan\"><Float4: 0,0,0,0>\n                Set<Variable: visible><Bool: false>\n\ntree \"update\"\n","data":[],"type":0,"name":"Brick"},{"group":"","id":"AF740215-97FA-4021-BB52-DAE422440FE3","value":"\ntext = Shape2D<Type: \"Text\"><Position: 40, 45><Text: \"Game Over\"><Font: \"Square\"><FontSize: 4.5><Digits: 3>\n\ntextLayer = Layer<Shaders: backShader><Shapes: text>\n\nscene = Scene<Layers: textLayer>\n","data":[],"type":3,"name":"GameOver"},{"group":"","id":"C64898CF-AA5C-4C09-A809-AD892BCC97DC","value":"tree \"init\"\n    lastHitTime = Float<0>\n    \ntree \"flash\"\n    repeat\n        Set<Variable: lastHitTime><Float: Time>\n","data":[],"type":0,"name":"Background"}],"behaviorGroups":[]}